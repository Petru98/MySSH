#ifndef INCLUDED_LOCK_HPP
#define INCLUDED_LOCK_HPP

#include "Mutex.hpp"

////////////////////////////////////////////////////////////////////////////////
/// \brief A class used for unlocking mutexes automatically.
////////////////////////////////////////////////////////////////////////////////
class Lock
{
public:
    ////////////////////////////////////////////////////////////////////////////////
    /// \brief Lock mutex and take onwership over it.
    /// \details If locking the mutex fails then Mutex::lock may throw.
    ////////////////////////////////////////////////////////////////////////////////
    explicit Lock(Mutex& mutex);

    ////////////////////////////////////////////////////////////////////////////////
    /// \brief Unlock mutex when lock goes out of scope.
    /// \details If unlocking the mutex fails then Mutex::unlock may throw.
    ////////////////////////////////////////////////////////////////////////////////
    ~Lock();



private:
    Mutex& mutex; ///< Mutex
};





inline Lock::Lock(Mutex& mutex) : mutex(mutex)
{
    this->mutex.lock();
}
inline Lock::~Lock()
{
    this->mutex.unlock();
}
#endif
